#!/usr/bin/env python3
"""
Script test m√¥ h√¨nh realtime tr√™n Raspberry Pi 5
Thu th·∫≠p ·∫£nh v√† nh√£n khi detect ƒë∆∞·ª£c object
"""

import cv2
import numpy as np
import os
import time
import json
from datetime import datetime
from ultralytics import YOLO

class RealtimeDataCollector:
    def __init__(self):
        # C·∫•u h√¨nh
        self.model_path = "../weights/best.pt"  # ho·∫∑c best.torchscript
        self.confidence_threshold = 0.25
        self.save_interval = 2.0  # L∆∞u ·∫£nh m·ªói 2 gi√¢y khi detect
        
        # Th∆∞ m·ª•c l∆∞u d·ªØ li·ªáu
        self.images_dir = "data/images"
        self.labels_dir = "data/labels"
        
        # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
        os.makedirs(self.images_dir, exist_ok=True)
        os.makedirs(self.labels_dir, exist_ok=True)
        
        # Kh·ªüi t·∫°o model v√† camera
        self.model = None
        self.camera = None
        self.last_save_time = 0
        self.detection_count = 0
        
        # Class names (t·ª´ metadata.yaml)
        self.class_names = {0: "hands"}
        
    def load_model(self):
        """Load YOLO model"""
        try:
            print("üîÑ Loading model...")
            self.model = YOLO(self.model_path)
            print("‚úÖ Model loaded successfully!")
            return True
        except Exception as e:
            print(f"‚ùå Error loading model: {e}")
            return False
    
    def initialize_camera(self):
        """Kh·ªüi t·∫°o camera"""
        try:
            print("üîÑ Initializing camera...")
            self.camera = cv2.VideoCapture(0)
            
            # C·∫•u h√¨nh camera
            self.camera.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
            self.camera.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
            self.camera.set(cv2.CAP_PROP_FPS, 30)
            
            if not self.camera.isOpened():
                print("‚ùå Cannot open camera!")
                return False
            
            print("‚úÖ Camera initialized successfully!")
            return True
        except Exception as e:
            print(f"‚ùå Error initializing camera: {e}")
            return False
    
    def save_detection_data(self, frame, detections):
        """L∆∞u ·∫£nh v√† nh√£n khi detect ƒë∆∞·ª£c object"""
        current_time = time.time()
        
        # Ch·ªâ l∆∞u n·∫øu ƒë√£ qua kho·∫£ng th·ªùi gian save_interval
        if current_time - self.last_save_time < self.save_interval:
            return
        
        # T·∫°o timestamp cho t√™n file
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S_%f")
        
        # L∆∞u ·∫£nh
        image_path = os.path.join(self.images_dir, f"detection_{timestamp}.jpg")
        cv2.imwrite(image_path, frame)
        
        # T·∫°o file nh√£n YOLO format
        label_path = os.path.join(self.labels_dir, f"detection_{timestamp}.txt")
        
        with open(label_path, 'w') as f:
            for detection in detections:
                # L·∫•y th√¥ng tin detection
                bbox = detection["bbox"]  # [x1, y1, x2, y2]
                class_id = detection["class_id"]
                conf = detection["confidence"]
                
                # Chuy·ªÉn ƒë·ªïi sang YOLO format (center_x, center_y, width, height)
                img_height, img_width = frame.shape[:2]
                
                center_x = (bbox[0] + bbox[2]) / 2 / img_width
                center_y = (bbox[1] + bbox[3]) / 2 / img_height
                width = (bbox[2] - bbox[0]) / img_width
                height = (bbox[3] - bbox[1]) / img_height
                
                # Ghi nh√£n theo format YOLO: class_id center_x center_y width height
                f.write(f"{class_id} {center_x:.6f} {center_y:.6f} {width:.6f} {height:.6f}\n")
        
        self.last_save_time = current_time
        self.detection_count += 1
        
        print(f"üíæ Saved detection data: {image_path}")
        print(f"   Labels: {label_path}")
        print(f"   Total detections saved: {self.detection_count}")
    
    def draw_detections(self, frame, detections):
        """V·∫Ω detections l√™n frame"""
        for detection in detections:
            bbox = detection["bbox"]
            class_name = detection["class_name"]
            conf = detection["confidence"]
            
            # V·∫Ω bounding box
            cv2.rectangle(frame, (bbox[0], bbox[1]), (bbox[2], bbox[3]), (0, 255, 0), 2)
            
            # V·∫Ω label
            label = f"{class_name}: {conf:.2f}"
            cv2.putText(frame, label, (bbox[0], bbox[1]-10), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
        
        return frame
    
    def run(self):
        """Ch·∫°y detection realtime"""
        print("üöÄ Starting realtime detection and data collection...")
        print(f"üìÅ Saving images to: {self.images_dir}")
        print(f"üìÅ Saving labels to: {self.labels_dir}")
        print("Press 'q' to quit")
        
        while True:
            # ƒê·ªçc frame t·ª´ camera
            ret, frame = self.camera.read()
            if not ret:
                print("‚ùå Failed to read frame from camera")
                break
            
            # Th·ª±c hi·ªán detection
            results = self.model(frame, conf=self.confidence_threshold, verbose=False)
            
            detections = []
            for result in results:
                if result.boxes is not None:
                    boxes = result.boxes
                    for box in boxes:
                        # L·∫•y th√¥ng tin detection
                        x1, y1, x2, y2 = box.xyxy[0].cpu().numpy()
                        conf = box.conf[0].cpu().numpy()
                        cls = int(box.cls[0].cpu().numpy())
                        
                        # L·∫•y t√™n class
                        class_name = self.class_names.get(cls, f"class_{cls}")
                        
                        detection = {
                            "bbox": [int(x1), int(y1), int(x2), int(y2)],
                            "class_id": cls,
                            "class_name": class_name,
                            "confidence": float(conf)
                        }
                        detections.append(detection)
            
            # L∆∞u d·ªØ li·ªáu n·∫øu c√≥ detection
            if detections:
                self.save_detection_data(frame, detections)
            
            # V·∫Ω detections l√™n frame
            frame = self.draw_detections(frame, detections)
            
            # Hi·ªÉn th·ªã th√¥ng tin
            cv2.putText(frame, f"Detections: {len(detections)}", (10, 30), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
            cv2.putText(frame, f"Saved: {self.detection_count}", (10, 60), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
            
            # Hi·ªÉn th·ªã frame
            cv2.imshow("Realtime Detection", frame)
            
            # Ki·ªÉm tra ph√≠m tho√°t
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
        
        # Cleanup
        self.camera.release()
        cv2.destroyAllWindows()
        print(f"\n‚úÖ Data collection completed!")
        print(f"üìä Total detections saved: {self.detection_count}")

def main():
    # T·∫°o collector
    collector = RealtimeDataCollector()
    
    # Load model
    if not collector.load_model():
        print("‚ùå Failed to load model!")
        return
    
    # Kh·ªüi t·∫°o camera
    if not collector.initialize_camera():
        print("‚ùå Failed to initialize camera!")
        return
    
    # Ch·∫°y detection
    try:
        collector.run()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Stopped by user")
    except Exception as e:
        print(f"‚ùå Error during execution: {e}")

if __name__ == "__main__":
    main() 