#!/usr/bin/env python3
"""
Script xem th·ªëng k√™ d·ªØ li·ªáu ƒë√£ thu th·∫≠p
"""

import os
import glob
from datetime import datetime

def get_data_stats():
    """L·∫•y th·ªëng k√™ d·ªØ li·ªáu ƒë√£ thu th·∫≠p"""
    
    images_dir = "data/images"
    labels_dir = "data/labels"
    
    # Ki·ªÉm tra th∆∞ m·ª•c t·ªìn t·∫°i
    if not os.path.exists(images_dir):
        print("‚ùå Th∆∞ m·ª•c data/images kh√¥ng t·ªìn t·∫°i!")
        return
    
    if not os.path.exists(labels_dir):
        print("‚ùå Th∆∞ m·ª•c data/labels kh√¥ng t·ªìn t·∫°i!")
        return
    
    # ƒê·∫øm s·ªë file
    image_files = glob.glob(os.path.join(images_dir, "*.jpg"))
    label_files = glob.glob(os.path.join(labels_dir, "*.txt"))
    
    print("üìä Th·ªëng k√™ d·ªØ li·ªáu thu th·∫≠p")
    print("=" * 40)
    print(f"üìÅ ·∫¢nh: {len(image_files)} files")
    print(f"üìÅ Nh√£n: {len(label_files)} files")
    
    if len(image_files) == 0:
        print("‚ö†Ô∏è Ch∆∞a c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c thu th·∫≠p!")
        return
    
    # Th·ªëng k√™ theo th·ªùi gian
    print("\nüìÖ Th·ªëng k√™ theo th·ªùi gian:")
    
    # L·∫•y th·ªùi gian c·ªßa file ƒë·∫ßu ti√™n v√† cu·ªëi c√πng
    image_files.sort()
    first_image = image_files[0]
    last_image = image_files[-1]
    
    first_time = os.path.getctime(first_image)
    last_time = os.path.getctime(last_image)
    
    first_dt = datetime.fromtimestamp(first_time)
    last_dt = datetime.fromtimestamp(last_time)
    
    print(f"üïê B·∫Øt ƒë·∫ßu: {first_dt.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üïê K·∫øt th√∫c: {last_dt.strftime('%Y-%m-%d %H:%M:%S')}")
    
    duration = last_dt - first_dt
    print(f"‚è±Ô∏è Th·ªùi gian thu th·∫≠p: {duration}")
    
    # Th·ªëng k√™ theo ng√†y
    print("\nüìà Th·ªëng k√™ theo ng√†y:")
    daily_stats = {}
    
    for image_file in image_files:
        file_time = os.path.getctime(image_file)
        file_dt = datetime.fromtimestamp(file_time)
        date_key = file_dt.strftime('%Y-%m-%d')
        
        if date_key not in daily_stats:
            daily_stats[date_key] = 0
        daily_stats[date_key] += 1
    
    for date, count in sorted(daily_stats.items()):
        print(f"   {date}: {count} detections")
    
    # Th·ªëng k√™ nh√£n
    print("\nüè∑Ô∏è Th·ªëng k√™ nh√£n:")
    class_counts = {}
    
    for label_file in label_files:
        try:
            with open(label_file, 'r') as f:
                for line in f:
                    parts = line.strip().split()
                    if len(parts) >= 5:
                        class_id = int(parts[0])
                        if class_id not in class_counts:
                            class_counts[class_id] = 0
                        class_counts[class_id] += 1
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói ƒë·ªçc file {label_file}: {e}")
    
    class_names = {0: "hands"}
    for class_id, count in sorted(class_counts.items()):
        class_name = class_names.get(class_id, f"class_{class_id}")
        print(f"   {class_name} (ID {class_id}): {count} objects")
    
    # Dung l∆∞·ª£ng ·ªï c·ª©ng
    print("\nüíæ Dung l∆∞·ª£ng:")
    total_size = 0
    for image_file in image_files:
        total_size += os.path.getsize(image_file)
    
    size_mb = total_size / (1024 * 1024)
    print(f"   T·ªïng dung l∆∞·ª£ng ·∫£nh: {size_mb:.2f} MB")
    print(f"   Trung b√¨nh m·ªói ·∫£nh: {size_mb/len(image_files):.2f} MB")
    
    # G·ª£i √Ω
    print("\nüí° G·ª£i √Ω:")
    if len(image_files) < 100:
        print("   ‚ö†Ô∏è C·∫ßn thu th·∫≠p th√™m d·ªØ li·ªáu (√≠t nh·∫•t 100 ·∫£nh)")
    elif len(image_files) < 500:
        print("   ‚úÖ D·ªØ li·ªáu ƒë·ªß ƒë·ªÉ train th√™m model")
    else:
        print("   üéâ D·ªØ li·ªáu r·∫•t phong ph√∫!")
    
    print(f"   üìÅ Th∆∞ m·ª•c ·∫£nh: {os.path.abspath(images_dir)}")
    print(f"   üìÅ Th∆∞ m·ª•c nh√£n: {os.path.abspath(labels_dir)}")

def main():
    get_data_stats()

if __name__ == "__main__":
    main() 